<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: iOS | Jimmy.King's Blog]]></title>
  <link href="http://jimmyking.github.io/blog/categories/ios/atom.xml" rel="self"/>
  <link href="http://jimmyking.github.io/"/>
  <updated>2013-07-02T14:12:54+08:00</updated>
  <id>http://jimmyking.github.io/</id>
  <author>
    <name><![CDATA[Jimmy.King]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[使用dispatch_once创建单例]]></title>
    <link href="http://jimmyking.github.io/blog/2013/07/02/dispatch-once/"/>
    <updated>2013-07-02T14:04:00+08:00</updated>
    <id>http://jimmyking.github.io/blog/2013/07/02/dispatch-once</id>
    <content type="html"><![CDATA[<p>今天在看<a href="https://github.com/brunow/BWStatusBarOverlay">BWStatusBarOverlay</a>的源码时发现他在实例化BWStatusBarOverlay时使用了单例模式。<br/>
代码如下：</p>

<p>```
+ (BWStatusBarOverlay *)shared {</p>

<pre><code>static dispatch_once_t pred = 0;
__strong static id _sharedObject = nil;
dispatch_once(&amp;pred, ^{
    _sharedObject = [[self alloc] init];
});
return _sharedObject;
</code></pre>

<p>}
```</p>

<p>创建单例关键使用到的方法就是dispatch_once函数。</p>

<p>函数<code>void dispatch_once( dispatch_once_t *predicate, dispatch_block_t block);</code></p>

<p>其中第一个参数predicate，该参数是检查后面第二个参数所代表的代码块是否被调用的谓词，第二个参数则是在整个应用程序中只会被调用一次的代码块。dispach_once函数中的代码块只会被执行一次，而且还是线程安全的。</p>

<p>通过这个函数我们就可以轻松的创建单例模式了:)</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[APNS笔记]]></title>
    <link href="http://jimmyking.github.io/blog/2013/06/25/apnsbi-ji/"/>
    <updated>2013-06-25T14:27:00+08:00</updated>
    <id>http://jimmyking.github.io/blog/2013/06/25/apnsbi-ji</id>
    <content type="html"><![CDATA[<p>APNS的相关介绍及使用我就不再写了<a href="http://www.raywenderlich.com/">raywenderlich.com</a>上面有非常详细的教程<a href="http://www.raywenderlich.com/32960/apple-push-notification-services-in-ios-6-tutorial-part-1">part1</a>,<a href="http://www.raywenderlich.com/32963/apple-push-notification-services-in-ios-6-tutorial-part-2">part2</a></p>

<p>由于此教程使用的APNS服务端是php写的。由于我在实际项目中APNS服务端使用的是java，所以此教程中在怎样生成APNS证书的说明对我并不适用。</p>

<p>顺带推荐下一个非常不错的java APNS开源组件<a href="https://github.com/notnoop/java-apns">java-apns</a>。</p>

<p>还是进入正题，在生成证书前我们需要在<a href="https://developer.apple.com/devcenter/ios/index.action">iOS Dev Center</a>中配置某个APP ID的push notification功能。按照上文教程中得步骤我们将会得到一下文件(已配置开发证书为例)</p>

<p><code>
CertificateSigningRequest.certSigningRequest
test.p12(在钥匙串中导出的私钥)
aps_development.cer（申请push证书后下载得到）
</code></p>

<h4>Step1: 将aps_development.cer转换成aps_development.pem格式</h4>

<p><code>
openssl x509 -in aps_development.cer -inform DER -out aps_development.pem -outform PEM
</code></p>

<h4>Step2: 将test.p12转换成pem格式，此时需要输入密码</h4>

<p><code>
openssl pkcs12 -nocerts -out test.pem -in test.p12
</code></p>

<h4>Step3: 得到最终在java中使用的证书文件aps_development.p12</h4>

<p><code>
openssl pkcs12 -export -in aps_development.pem -inkey test.pem -certfile CertificateSigningRequest.certSigningRequest -name "aps_development" -out aps_development.p12
</code></p>

<p>生产环境重复以上步骤即可。</p>
]]></content>
  </entry>
  
</feed>
